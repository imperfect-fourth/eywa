// generated by eywa. DO NOT EDIT. Any changes will be overwritten.
package eywatest

import (
	"bytes"
	"github.com/google/uuid"
	"github.com/imperfect-fourth/eywa"
	"fmt"
)


var testTable_PkeyConstraint = eywa.Constraint[testTable](fmt.Sprintf("%s_pkey", (new(testTable)).TableName()))
const testTable_Name eywa.FieldName[testTable] = "name"

func testTable_NameField(val string) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "name",
		Value: val,
	}
}

func testTable_NameVar(val string) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "name",
		Value: eywa.QueryVar("testTable_Name", eywa.StringVar[string](val)),
	}
}
const testTable_Age eywa.FieldName[testTable] = "age"

func testTable_AgeField(val *int) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "age",
		Value: val,
	}
}

func testTable_AgeVar(val *int) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "age",
		Value: eywa.QueryVar("testTable_Age", eywa.NullableIntVar[*int](val)),
	}
}
const testTable_ID eywa.FieldName[testTable] = "id"

func testTable_IDField(val int) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "id",
		Value: val,
	}
}

func testTable_IDVar(val int) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "id",
		Value: eywa.QueryVar("testTable_ID", eywa.IntVar[int](val)),
	}
}
const testTable_IDd eywa.FieldName[testTable] = "idd"

func testTable_IDdField(val int32) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "idd",
		Value: val,
	}
}

func testTable_IDdVar(val int32) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "idd",
		Value: eywa.QueryVar("testTable_IDd", eywa.IntVar[int32](val)),
	}
}
const testTable_custom eywa.FieldName[testTable] = "custom"

func testTable_customField(val *customType) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "custom",
		Value: val,
	}
}

func testTable_customVar[T interface{eywa.JSONValue | eywa.JSONBValue;eywa.TypedValue}](val *customType) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "custom",
		Value: eywa.QueryVar("testTable_custom", T{val}),
	}
}

func testTable_testTable2(subField eywa.FieldName[testTable2], subFields ...eywa.FieldName[testTable2]) eywa.FieldName[testTable] {
	buf := bytes.NewBuffer([]byte("testTable2 {\n"))
	buf.WriteString(string(subField))
	for _, f := range subFields {
		buf.WriteString("\n")
		buf.WriteString(string(f))
	}
	buf.WriteString("\n}")
	return eywa.FieldName[testTable](buf.String())
}
const testTable_JsonBCol eywa.FieldName[testTable] = "jsonb_col"

func testTable_JsonBColField(val jsonbcol) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "jsonb_col",
		Value: val,
	}
}

func testTable_JsonBColVar[T interface{eywa.JSONValue | eywa.JSONBValue;eywa.TypedValue}](val jsonbcol) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "jsonb_col",
		Value: eywa.QueryVar("testTable_JsonBCol", T{val}),
	}
}
const testTable_Status eywa.FieldName[testTable] = "status"

func testTable_StatusField(val eywa.Enum[status]) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "status",
		Value: val,
	}
}

func testTable_StatusVar(val eywa.Enum[status]) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "status",
		Value: eywa.QueryVar("testTable_Status", eywa.StringVar[eywa.Enum[status]](val)),
	}
}
const testTable_Generic eywa.FieldName[testTable] = "generic_type"

func testTable_GenericField(val GenericType[string, int]) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "generic_type",
		Value: val,
	}
}

func testTable_GenericVar(val GenericType[string, int]) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "generic_type",
		Value: eywa.QueryVar("testTable_Generic", eywa.StringVar[GenericType[string, int]](val)),
	}
}
const testTable_ArrayCol eywa.FieldName[testTable] = "testarr"

func testTable_ArrayColField(val []string) eywa.Field[testTable] {
	return eywa.Field[testTable]{
		Name: "testarr",
		Value: val,
	}
}

var testTable2_PkeyConstraint = eywa.Constraint[testTable2](fmt.Sprintf("%s_pkey", (new(testTable2)).TableName()))
const testTable2_ID eywa.FieldName[testTable2] = "id"

func testTable2_IDField(val uuid.UUID) eywa.Field[testTable2] {
	return eywa.Field[testTable2]{
		Name: "id",
		Value: val,
	}
}
const testTable2_Age eywa.FieldName[testTable2] = "age"

func testTable2_AgeField(val int) eywa.Field[testTable2] {
	return eywa.Field[testTable2]{
		Name: "age",
		Value: val,
	}
}

func testTable2_AgeVar(val int) eywa.Field[testTable2] {
	return eywa.Field[testTable2]{
		Name: "age",
		Value: eywa.QueryVar("testTable2_Age", eywa.IntVar[int](val)),
	}
}
